01. 在vue 中使用keep-alive  可以实现状态保持,  使用include 可以实现指定的路由项进行缓存
	activated 生命周期钩子 被 keep-alive 缓存的组件激活时调用
	deactivated 生命周期钩子 被 keep-alive 缓存的组件停用时调用 
	
	beforeRouteLeave 路由钩子在 离开当前组件页面时触发路由钩子
	
02. 在 vue-cli 3.0 搭建的项目中,使用axios 可以请求本地的静态文件, 但是这些静态文件要放在 public 的目录下面才可以

03. 在vue 中实现页面换肤, 先将默认需要换的css 提取成一个单独的css 文件, 然后 配置一个 对应的js 文件, 写好主题配置, 和 用key 在默认主题中进行匹配, 然后替换 value 值
	然后在 换肤操作界面中使用 axios 将默认的css文件 请求过来,  利用事件, 和配置好的 js 文件, 首先将样式替换成关键字, 再将关键字替换成样式, 然后将处理过的 css 写在style ,再挂载在 document 上
	先创建一个 style,  将css 设置为内容, 添加id , 根据id 获取标签,  oldEl ? document.head.replaceChild(styleDom, oldEl) : document.head.appendChild(styleDom)
	如果存在使用 替换子元素的方式, 不存在就直接添加子元素
	
04. vue 中在页面上加载js 插件使用的方式是 require('tracking/build/tracking-min.js')
	<script>
	require('tracking/build/tracking-min.js')
	
	export default {
	}
	</script>
	
05./**
	 * 导航守卫的执行的先后顺序 
	 * 先是 全局的前置路由守卫 beforeEach ----> 然后是路由独享的守卫 beforeEnter -----> 然后是组件内的 beforeRouteEnter 当前组件不能
	 * 访问到this 实例 可以使用 next(vm=>{}) 回调
	 * ----> 然后就是全局的解析守卫 beforeResolve -----> 然后是全局的后置路由守卫 afterEach ---> dom更新(生命周期执行) ---> 最后会是 beforeRouteEnter 守卫
	 * 中使用的 next(vm=>{}) 的回调函数执行, 创建好的组件实例会作为回调函数的参数传入
	 * 
	 * 当组件失活时会调用  组件内的 beforeRouteLeave 导航离开该组件时调用
	 * 
	 * 还有一个组件内的守卫 beforeRouteUpdate 钩子, 会在当前组件被复用时调用, 一般是在动态路由中的组件中会被触发, 此时该钩子会执行
	 * 然后该组件内的其它钩子,除了第一次会调用时, 在动态路由一直切换当前组件时不会再被 调用, 只有 当前组件内的钩子
	 * beforeRouteUpdate 和 全局的钩子会被调用 
	 * 
	 */

06. 使用vue 3.0 的bate 版本的步骤
  01. 先使用vuecli4.x 的以上的版本创建一个 vue 项目
  02. 在项目搭建完成后使用指令 vue add vue-next
  03. 在vue3.0 中 创建响应式数据是使用: ref 一般用来创建基本数据类型, reactive 一般是用来创建引用数据类型
  
07.  echats保平安 :  https://www.makeapie.com/explore.html#sort=rank~timeframe=all~author=all

08.修改滚动条样式
	隐藏 div 元素的滚动条

	div::-webkit-scrollbar {
		display: none;
	}
	div::-webkit-scrollbar 滚动条整体部分
	div::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条
	div::-webkit-scrollbar-track 滚动条的轨道（里面装有 Thumb
	div::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置
	div::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去
	div::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处
	div::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件注意此方案有兼容性问题，
	一般需要隐藏滚动条时我都是用一个色块通过定位盖上去，或者将子级元素调大，父级元素使用 overflow-hidden 截掉滚动条部分。暴力且直接。
	
09.多行文本超出显示...
	display: -webkit-box;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: 3;
	overflow: hidden;
	
10.	css 一行文本超出...
	overflow: hidden;
	text-overflow:ellipsis;
	white-space: nowrap;
	
11.	contenteditable
	html 中大部分标签都是不可以编辑的，但是添加了 contenteditable 属性之后，标签会变成可编辑状态。
	<div contenteditable="true"></div>
	不过通过这个属性把标签变为可编辑状态后只有 input 事件，没有 change 事件。
	也不能像表单一样通过 maxlength 控制最大长度。我也忘记我在什么情况下用到过了，后面想起来再补吧。
	
12.自定义多行文本溢出
	推荐两个封装好的组件
	HeyUI：https://www.heyui.top/component/other/textellipsis[5]
	vue-text-ellipsis：https://github.com/Luobata/vue-text-ellipsis[6]

13./*
    一.vue 中的性能优化
      01. v-if 和 v-show 分情况合理的使用
      02.避免v-for 和 v-if 同时使用
      03.v-for 中的key 值 避免使用数组中的index, 最好使用 数据中的唯一id 
      04.释放组件资源,比如 在beforeDestroy钩子函数中清除定时器
      05.长列表数据的渲染,首先使用懒加载,触底加载事件,或者使用插件vue-virtual-scroller 可以实现vue 可视区的渲染
      06.ui框架的使用的时候,使用组件的按需加载

    二.监听vue的生命周期钩子
      <!--通过@hook:updated监听组件的updated生命钩子函数-->
      <!--组件的所有生命周期钩子都可以通过@hook:钩子函数名 来监听触发-->
  */
  
14.https://mp.weixin.qq.com/s/brIUk8kgiSItG9DWECu2ew 可能会忽略的事件API 
15. https://juejin.cn/post/6844903906024095751  vue 路由实现的原理